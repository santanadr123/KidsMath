package com.mathProgram;

import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.border.TitledBorder;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;

public class AppGUI extends JFrame implements ActionListener {

    private String userAnswer;
    private Division divide;
    private Multiplication multiply;
    private Subtraction subtract;
    private Addition add;
    private JPanel mainPanel;
    private JButton equationRandom;
    private JTextField currentEquation;
    private JButton additionButton;
    private JButton divideButton;
    private JButton multiplyButton;
    private JButton checkAnswer;
    private JButton subtractButton;
    private JPanel topPanel;
    private JPanel centerPanel;
    private JTextField answer;
    private JPanel bottomPanel;
    private JLabel newBackground;
    private String equationAnswer;
    private int guess;
    private Object currentObject = new Object();
    ImageIcon img  = new ImageIcon(getClass().getResource("/topPanelBackground.PNG"));
    Image image = img.getImage();


    public AppGUI() {
        super("Kids Math");
        $$$setupUI$$$();
        listeners();
        setResizable(false);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        add(mainPanel);
        pack();
        setLocationRelativeTo(null);
        setVisible(true);
    }

    private void createUIComponents() {
        topPanel = new ImagePanel(image);
    }

    public void listeners() {
        additionButton.addActionListener(this);
        subtractButton.addActionListener(this);
        multiplyButton.addActionListener(this);
        divideButton.addActionListener(this);
        equationRandom.addActionListener(this);
        checkAnswer.addActionListener(e -> {
            if (answer.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Oops! remember to type your answer.");
            } else if (answer.getText().equals(equationAnswer)) {
                JOptionPane.showMessageDialog(null, "Great Job!!");
                answer.setText(null);
                changeEquation();
            } else {
                JOptionPane.showMessageDialog(null, "Oops, try again.");
                answer.setText(null);
            }
        });
        equationRandom.addActionListener(e -> {
            guess = (int) (Math.random() * 3 + 1);
            changeEquation();
        });
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        currentObject = e.getSource();
        if (currentObject == additionButton) {
            add = new Addition();
            setCurrentObject(add);
            changeEquation();
        }
        if (currentObject == subtractButton) {
            subtract = new Subtraction();
            setCurrentObject(subtract);
            changeEquation();
        }
        if (currentObject == multiplyButton) {
            multiply = new Multiplication();
            setCurrentObject(multiply);
            changeEquation();
        }
        if (currentObject == divideButton) {
            divide = new Division();
            setCurrentObject(divide);
            changeEquation();
        }
    }

    public void changeEquation() {

        if (currentObject.getClass().isInstance(add) || guess == 1) {
            if (currentObject != null)
                add = new Addition();
            currentEquation.setText(add.getEquation());
            equationAnswer = add.getResult();
        }
        if (currentObject.getClass().isInstance(subtract) || guess == 2) {
            if (currentObject != null)
                subtract = new Subtraction();
            currentEquation.setText(subtract.getEquation());
            equationAnswer = subtract.getResult();
        }
        if (currentObject.getClass().isInstance(multiply) || guess == 3) {
            if (currentObject != null)
                multiply = new Multiplication();
            currentEquation.setText(multiply.getEquation());
            equationAnswer = multiply.getResult();
        }
        if (currentObject.getClass().isInstance(divide) || guess == 4) {
            if (currentObject != null)
                divide = new Division();
            currentEquation.setText(divide.getEquation());
            equationAnswer = divide.getResult();
        }
    }

    public Object getCurrentObject() {
        return currentObject;
    }

    public void setCurrentObject(Object currentObject) {
        this.currentObject = currentObject;
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridBagLayout());
        mainPanel.setBackground(new Color(-11303595));
        mainPanel.setEnabled(true);
        mainPanel.setPreferredSize(new Dimension(600, 630));
        bottomPanel = new JPanel();
        bottomPanel.setLayout(new GridBagLayout());
        bottomPanel.setBackground(new Color(-1));
        bottomPanel.setPreferredSize(new Dimension(300, 200));
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 3;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        gbc.insets = new Insets(0, 0, 20, 0);
        mainPanel.add(bottomPanel, gbc);
        bottomPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEmptyBorder(), "Answer", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, this.$$$getFont$$$("Comic Sans MS", -1, 18, bottomPanel.getFont()), new Color(-11303595)));
        checkAnswer = new JButton();
        checkAnswer.setBackground(new Color(-11303595));
        Font checkAnswerFont = this.$$$getFont$$$(null, -1, 14, checkAnswer.getFont());
        if (checkAnswerFont != null) checkAnswer.setFont(checkAnswerFont);
        checkAnswer.setPreferredSize(new Dimension(200, 50));
        checkAnswer.setText("Check");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.gridwidth = 2;
        bottomPanel.add(checkAnswer, gbc);
        answer = new JTextField();
        answer.setCaretColor(new Color(-1769463));
        answer.setDisabledTextColor(new Color(-13015109));
        Font answerFont = this.$$$getFont$$$("Courier New", Font.BOLD, 72, answer.getFont());
        if (answerFont != null) answer.setFont(answerFont);
        answer.setForeground(new Color(-13015109));
        answer.setHorizontalAlignment(0);
        answer.setPreferredSize(new Dimension(580, 120));
        answer.setSelectedTextColor(new Color(-4474219));
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        bottomPanel.add(answer, gbc);
        topPanel.setLayout(new GridBagLayout());
        topPanel.setEnabled(true);
        topPanel.setPreferredSize(new Dimension(532, 200));
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        mainPanel.add(topPanel, gbc);
        additionButton = new JButton();
        additionButton.setBackground(new Color(-14208603));
        additionButton.setHorizontalTextPosition(0);
        additionButton.setIcon(new ImageIcon(getClass().getResource("/add-icon.png")));
        additionButton.setPreferredSize(new Dimension(100, 100));
        additionButton.setText("");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.gridheight = 2;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.insets = new Insets(10, 50, 0, 0);
        topPanel.add(additionButton, gbc);
        multiplyButton = new JButton();
        multiplyButton.setBackground(new Color(-8701328));
        multiplyButton.setHorizontalTextPosition(0);
        multiplyButton.setIcon(new ImageIcon(getClass().getResource("/Multiplication.png")));
        multiplyButton.setPreferredSize(new Dimension(100, 100));
        multiplyButton.setText("");
        gbc = new GridBagConstraints();
        gbc.gridx = 3;
        gbc.gridy = 1;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.insets = new Insets(10, 10, 0, 0);
        topPanel.add(multiplyButton, gbc);
        divideButton = new JButton();
        divideButton.setBackground(new Color(-11755461));
        divideButton.setHorizontalTextPosition(0);
        divideButton.setIcon(new ImageIcon(getClass().getResource("/division.png")));
        divideButton.setPreferredSize(new Dimension(100, 100));
        divideButton.setText("");
        gbc = new GridBagConstraints();
        gbc.gridx = 4;
        gbc.gridy = 0;
        gbc.gridheight = 2;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.insets = new Insets(10, 0, 0, 60);
        topPanel.add(divideButton, gbc);
        final JLabel label1 = new JLabel();
        label1.setFocusable(true);
        Font label1Font = this.$$$getFont$$$("Ink Free", Font.BOLD, 36, label1.getFont());
        if (label1Font != null) label1.setFont(label1Font);
        label1.setForeground(new Color(-1769463));
        label1.setHorizontalAlignment(0);
        label1.setHorizontalTextPosition(0);
        label1.setMaximumSize(new Dimension(73, 40));
        label1.setPreferredSize(new Dimension(200, 40));
        label1.setText("Kids Math");
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 0;
        gbc.gridwidth = 2;
        gbc.insets = new Insets(20, 0, 0, 0);
        topPanel.add(label1, gbc);
        subtractButton = new JButton();
        subtractButton.setBackground(new Color(-4163312));
        subtractButton.setHorizontalTextPosition(0);
        subtractButton.setIcon(new ImageIcon(getClass().getResource("/minus.png")));
        subtractButton.setPreferredSize(new Dimension(100, 100));
        subtractButton.setText("");
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 1;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(10, 10, 0, 0);
        topPanel.add(subtractButton, gbc);
        centerPanel = new JPanel();
        centerPanel.setLayout(new GridBagLayout());
        centerPanel.setBackground(new Color(-1));
        centerPanel.setPreferredSize(new Dimension(500, 200));
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        mainPanel.add(centerPanel, gbc);
        centerPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEmptyBorder(), "Equation", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, this.$$$getFont$$$("Comic Sans MS", -1, 18, centerPanel.getFont()), new Color(-11303595)));
        equationRandom = new JButton();
        equationRandom.setBackground(new Color(-11303595));
        Font equationRandomFont = this.$$$getFont$$$(null, -1, 14, equationRandom.getFont());
        if (equationRandomFont != null) equationRandom.setFont(equationRandomFont);
        equationRandom.setMaximumSize(new Dimension(300, 30));
        equationRandom.setPreferredSize(new Dimension(200, 50));
        equationRandom.setText("Random Equation");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        centerPanel.add(equationRandom, gbc);
        currentEquation = new JTextField();
        currentEquation.setBackground(new Color(-1));
        currentEquation.setEditable(false);
        currentEquation.setEnabled(true);
        Font currentEquationFont = this.$$$getFont$$$("Courier New", Font.BOLD, 72, currentEquation.getFont());
        if (currentEquationFont != null) currentEquation.setFont(currentEquationFont);
        currentEquation.setForeground(new Color(-13015109));
        currentEquation.setHorizontalAlignment(0);
        currentEquation.setPreferredSize(new Dimension(580, 120));
        currentEquation.setRequestFocusEnabled(true);
        currentEquation.setText("");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        centerPanel.add(currentEquation, gbc);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }
}